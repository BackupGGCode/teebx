# --- T2-COPYRIGHT-NOTE-BEGIN ---
# This copyright note is auto-generated by ./scripts/Create-CopyPatch.
# 
# T2 SDE: target/share/firmware/build.sh
# Copyright (C) 2004 - 2013 The T2 SDE Project
# 
# More information can be found in the files COPYING and README.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License. A copy of the
# GNU General Public License can be found in the file COPYING.
# --- T2-COPYRIGHT-NOTE-END ---
#
#Description: ubootimage

. $base/misc/target/functions.in

set -e

# variables initialization
#
# build root, build toolchain, initramfs preparation directory
build_root="$base/build/$SDECFG_ID"
build_toolchain="$base/build/$SDECFG_ID/TOOLCHAIN"
imagelocation="$build_toolchain/initramfs"
# set firmware preparation directory
imagelocation="$build_toolchain/firmware"

# image geometry variables
#
# sector size in bytes
sect_size=512
# first partition offset in sectors, defaults to 1.
# increase it via a target image.conf
# if needed to write raw data before fs partitions
part_offset=1
# partitions padding
rtp_block_pad=2028
ofp_block_pad=10240

# load target image.conf, if any
if [ -f $base/target/$target/image.conf ]; then
	echo "Overriding/loading variables specified in target image.conf."
	source $base/target/$target/image.conf
fi

# cylinder size in bytes (16 heads x 63 sectors/track x $sect_size bytes/sector)
cylinder_size=$((16 * 63 * $sect_size))
sectors_per_cylinder=$(($cylinder_size / $sect_size))

# build initramfs
. target/share/initramfs/build.sh

# convert linux initramfs to u-boot compliant format
echo "Make U-Boot initramfs image..."
mk_uboot_initramfs_cmd="${build_toolchain}/tools.cross/bin/mkimage \
	-n 'Initramfs U-Boot Image' \
	-A arm \
	-O linux \
	-T ramdisk \
	-C gzip \
	-d ${build_toolchain}/initramfs.igz ${build_toolchain}/initramfs.uImage"
eval $mk_uboot_initramfs_cmd

# compile U-Boot script(s), if any
echo "Make U-Boot scripts..."
if [ -f $base/target/$target/boot.cmd ]; then
	scr_source="$base/target/$target/boot.cmd"
	mk_uboot_script_cmd="${build_toolchain}/tools.cross/bin/mkimage \
		-n 'U-Boot boot script' \
		-A arm \
		-O u-boot \
		-T script \
		-C none \
		-d ${scr_source} ${build_toolchain}/boot.scr"
	eval $mk_uboot_script_cmd
fi

echo "Preparing firmware image from build result ..."
rm -rf $imagelocation{,.img}
mkdir -p $imagelocation ; cd $imagelocation
mkdir root_stage
mkdir root_stage/boot

# platform dependent initialization bits
#cp $base/target/$target/cmdline.txt root_stage/cmdline.txt
#cp $base/target/$target/config.txt root_stage/config.txt
if [ -n "$env_file" ]; then
	if [ -f $base/target/$target/$env_file ]; then
		echo "  -> copying $env_file to image root"
		cp $base/target/$target/$env_file root_stage/$env_file
	fi
fi
if [ -n "$fex_file" ]; then
	if [ -f $base/target/$target/$fex_file ]; then
		echo "  -> copying $fex_file to image root"
		cp $base/target/$target/$fex_file root_stage/$fex_file
	fi
fi

mkdir root_stage/conf
cp $base/target/$target/config.xml root_stage/conf/config.xml
mkdir offload_stage
mkdir offload_stage/opt
mkdir offload_stage/kernel-modules
mkdir offload_stage/software-information
mkdir loop

echo "Copy system into staging directories..."
echo "Linux kernel, u-boot, initramfs, modules..."
# using fat16 8.3 naming convention for destination files
# because some target support only boot from this partition type.
cp ../../boot/uImage root_stage/kernel.ubi
cp ${build_toolchain}/initramfs.uImage root_stage/iramfs.ubi
cp ${build_toolchain}/boot.scr root_stage/boot.scr
cp -Rp ../../lib/modules/* offload_stage/kernel-modules/

#echo "Proprietary binary blobs ..."
#cp ../../boot/bootcode.bin root_stage/
#cp ../../boot/start.elf root_stage/
#cp ../../boot/fixup.dat root_stage/

# move usr/* out of the initramfs and into /offload
mkdir offload_stage/rootfs
mkdir offload_stage/rootfs/usr/
mkdir offload_stage/rootfs/usr/libexec

# usr/bin
cp -Rp ../../usr/bin offload_stage/rootfs/usr/
rm -rf offload_stage/rootfs/usr/bin/aclocal*
rm -rf offload_stage/rootfs/usr/bin/auto*
rm -rf offload_stage/rootfs/usr/bin/bison
rm -rf offload_stage/rootfs/usr/bin/bzdiff
rm -rf offload_stage/rootfs/usr/bin/bzgrep
rm -rf offload_stage/rootfs/usr/bin/bzip2recover
rm -rf offload_stage/rootfs/usr/bin/bzmore
rm -rf offload_stage/rootfs/usr/bin/c_rehash
rm -rf offload_stage/rootfs/usr/bin/dbclient
rm -rf offload_stage/rootfs/usr/bin/envsubst
rm -rf offload_stage/rootfs/usr/bin/flite
rm -rf offload_stage/rootfs/usr/bin/flite_cmu_time_awb
rm -rf offload_stage/rootfs/usr/bin/flite_cmu_us_awb
rm -rf offload_stage/rootfs/usr/bin/flite_cmu_us_kal16
rm -rf offload_stage/rootfs/usr/bin/flite_cmu_us_rms
rm -rf offload_stage/rootfs/usr/bin/flite_cmu_us_slt
rm -rf offload_stage/rootfs/usr/bin/flite_time
rm -rf offload_stage/rootfs/usr/bin/gettextize
rm -rf offload_stage/rootfs/usr/bin/ifnames
rm -rf offload_stage/rootfs/usr/bin/libtool*
rm -rf offload_stage/rootfs/usr/bin/locale
rm -rf offload_stage/rootfs/usr/bin/ngettext
rm -rf offload_stage/rootfs/usr/bin/msg*
rm -rf offload_stage/rootfs/usr/bin/php-config
rm -rf offload_stage/rootfs/usr/bin/phpize
rm -rf offload_stage/rootfs/usr/bin/recode-sr-latin
rm -rf offload_stage/rootfs/usr/bin/xgettext
rm -rf offload_stage/rootfs/usr/bin/yacc
# usr/lib
cp -Rp ../../usr/lib offload_stage/rootfs/usr/
rm -rf offload_stage/rootfs/usr/lib/build/
rm -rf offload_stage/rootfs/usr/lib/engines/
rm -rf offload_stage/rootfs/usr/lib/gettext/
rm -rf offload_stage/rootfs/usr/lib/grub/
rm -rf offload_stage/rootfs/usr/lib/perl5/
rm -rf offload_stage/rootfs/usr/lib/php/
rm -rf offload_stage/rootfs/usr/lib/pkgconfig/
rm -rf offload_stage/rootfs/usr/lib/preloadable_libiconv.so

# usr/libexec
cp -Rp ../../usr/libexec/sftp-server offload_stage/rootfs/usr/libexec

# usr/sbin
cp -Rp ../../usr/sbin offload_stage/rootfs/usr/
# rm -rf offload_stage/rootfs/usr/sbin/remove_this_file

# usr/share
mkdir offload_stage/rootfs/usr/share
mkdir offload_stage/rootfs/usr/share/terminfo
mkdir offload_stage/rootfs/usr/share/terminfo/a
cp -Rp ../../usr/share/terminfo/a/ansi offload_stage/rootfs/usr/share/terminfo/a/
mkdir offload_stage/rootfs/usr/share/terminfo/l
cp -Rp ../../usr/share/terminfo/l/linux offload_stage/rootfs/usr/share/terminfo/l/
mkdir offload_stage/rootfs/usr/share/terminfo/s
cp -Rp ../../usr/share/terminfo/s/screen offload_stage/rootfs/usr/share/terminfo/s/
mkdir offload_stage/rootfs/usr/share/terminfo/v
cp -Rp ../../usr/share/terminfo/v/vt100 offload_stage/rootfs/usr/share/terminfo/v/
cp -Rp ../../usr/share/terminfo/v/vt200 offload_stage/rootfs/usr/share/terminfo/v/
mkdir offload_stage/rootfs/usr/share/terminfo/x
cp -Rp ../../usr/share/terminfo/x/xterm offload_stage/rootfs/usr/share/terminfo/x/
cp -Rp ../../usr/share/terminfo/x/xterm-color offload_stage/rootfs/usr/share/terminfo/x/
cp -Rp ../../usr/share/terminfo/x/xterm-xfree86 offload_stage/rootfs/usr/share/terminfo/x/
cp -Rp ../../usr/share/udhcpc offload_stage/rootfs/usr/share/
chmod 755 offload_stage/rootfs/usr/share/udhcpc/default.script
mkdir offload_stage/rootfs/usr/share/zoneinfo
cp -Rp ../../usr/share/zoneinfo offload_stage/rootfs/usr/share/

# usr/www
cp -Rp ../../usr/www offload_stage/rootfs/usr/
chmod 644 offload_stage/rootfs/usr/www/*
chmod 755 offload_stage/rootfs/usr/www/*.php
chmod 755 offload_stage/rootfs/usr/www/cgi-bin/*.cgi

echo "Documenting software used in this build ..."
svn info $base > offload_stage/software-information/00-svn-revision-information
cp ../../var/adm/packages/* offload_stage/software-information/

echo "Cleaning away stray files ..."
find ./ -name "._*" -delete
find ./ -name "*.a" -delete
find ./ -name "*.c" -delete
find ./ -name "*.o" -delete
find ./ -name "*.po" -delete
rm -rf `find ./ -name ".svn"`

echo "Root partition size calculation ..."
root_size=$(du -B$sect_size -s root_stage | cut -f 1)
root_size=$(($root_size + $rtp_block_pad))
echo "  --> $root_size sectors"

echo "Offload partition size calculation ..."
offload_size=$(du -B$sect_size -s offload_stage | cut -f 1)
offload_size=$(($offload_size + $ofp_block_pad))
echo "  --> $offload_size sectors"

. $base/target/share/calculate-image-size.part

echo "Writing a binary container for the disk image ..."
dd if=/dev/zero of=firmware.img bs=$sect_size count=$total_sector_count


cyls_needed=$(($total_sector_count / $sectors_per_cylinder + $part_offset))
echo "Cylinders needed: $total_sector_count sectors / $sectors_per_cylinder sectors-per-cyl + $part_offset = $cyls_needed"
offload_start_sector=$(($root_size + $part_offset))

echo "Partition the disk image ..."
sfdisk -C$cyls_needed -S63 -H16 -uS -f -D --no-reread firmware.img << EOF
$part_offset,$root_size,6,*
$offload_start_sector,,83
EOF


echo "Formatting and populating partitions ..."
echo " - part1 - dd..."
dd if=/dev/zero of=part1.img bs=$sect_size count=$root_size
echo " - part1 - losetup..."
losetup /dev/loop0 part1.img
echo " - part1 - mkfs.vfat..."
mkfs.vfat -n system /dev/loop0
echo " - part1 - mount..."
mount -t msdos /dev/loop0 loop
echo " - part1 - cp root_stage..."
cp -Rp root_stage/* loop/
echo " - part1 - unmount..."
umount /dev/loop0
echo " - part1 - losetup -d..."
losetup -d /dev/loop0

echo " - part2 - dd..."
dd if=/dev/zero of=part2.img bs=$sect_size count=$offload_size
echo " - part2 - mke2fs..."
mke2fs -m0 -L offload -F part2.img
echo " - part2 - tune2fs..."
tune2fs -c0 part2.img
echo " - part2 - mount..."
mount -o loop part2.img loop
echo " - part2 - cp offload_stage..."
cp -Rp offload_stage/* loop/
echo " - part2 - umount..."
umount loop

# write target ipl and spl, if any
if [ -f $base/target/$target/image.conf ]; then
	echo "Writing target ipl and spl..."
	echo "  -> offset: $ipl_offset"
	echo "  -> initial program loader: $ipl_file"
	dd if=$ipl_file of=firmware.img bs=$sect_size seek=$ipl_offset
	echo "  -> offset: $spl_offset"
	echo "  -> second program loader: $spl_file"
	dd if=$spl_file of=firmware.img bs=$sect_size seek=$spl_offset
fi

echo " - dd part1 -> firmware.img..."
dd if=part1.img of=firmware.img bs=$sect_size seek=$part_offset
echo " - dd part2 -> firmware.img..."
dd if=part2.img of=firmware.img bs=$sect_size seek=$offload_start_sector

. $base/target/share/check-image-size.part

echo "Compressing image ..."
gzip -9 firmware.img
echo "Moving image ..."
mv firmware.img.gz ../$SDECFG_ID.img.gz
