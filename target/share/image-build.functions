# $Id$
# part of BoneOS build platform (http://www.teebx.com/)
# Copyright(C) 2012 - 2013 Giovanni Vallesi.
# More information can be found in the files COPYING and README.

# import some appliance specific functions
source $base/target/share/appliance-build.functions

isDefined()
{
	if [ "`type -t $1`" == 'function' ]; then
		return 1
	fi
	return 0
}

isArray()
{
	# check if var $1 is an array
	# $1: variable name to check for (be aware, the **name**!)
	set +e
	local result
	result=$(declare -p ${1} 2> /dev/null | grep '^declare \-a' )
	if [ -z "$result" ] ; then
		echo 1
	else
		echo 0
	fi
	set -e
	return 0;
}

nzIsFile()
{
	if [ -z $1 ] ; then
		echo "Error: Missing argument for file!"
		exit 1
	else
		if [ ! -f $1 ] ; then
			echo "Error: file $1 does not exists!"
			exit 1
		fi
	fi
}

nzIsDir()
{
	if [ -z $1 ] ; then
		echo "Error: Missing argument for directory!"
		exit 1
	else
		if [ ! -d $1 ] ; then
			echo "Error: directory $1 does not exists!"
			exit 1
		fi
	fi
}

getImageSize()
{
	# use locals, avoid polluting the namespace
	local has_remainder=0
	local missing_sectors=0
	#
	echo "Total image size calculation ..."
	total_sector_count=$(($root_size + $offload_size + $part_offset))
	echo "  -> $total_sector_count sectors (actual calculated need, adjusting for padding...)"
	has_remainder=$(($total_sector_count % 32))
	if [ $has_remainder -ne 0 ] ; then
		missing_sectors=$((32 - $has_remainder))
		offload_size=$(($offload_size + $missing_sectors))
		total_sector_count=$(($root_size + $offload_size + $part_offset))
		echo "  -> sector count not evenly divisible by 32 (16k), adding $missing_sectors = $total_sector_count"
	fi
	echo "  -> $total_sector_count new sector count for even 16k"
}

getPartSize()
{
	# $1: top image preparation directory
	# $2: initramfs preparation directory
	# $3: rootfs preparation directory
	nzIsDir $1

	echo "Root partition size calculation..."
	root_size=$(du -B$sect_size -s $1/$2 | cut -f 1)
	root_size=$(($root_size + $rtp_block_pad))
	echo "  -> $root_size sectors"

	echo "Offload partition size calculation..."
	offload_size=$(du -B$sect_size -s $1/$3 | cut -f 1)
	offload_size=$(($offload_size + $ofp_block_pad))
	echo "  -> $offload_size sectors"
}

checkImageSize()
{
	# $1: top image preparation directory
	echo "Checking image size validity..."
	check_size_bytes=$(du -b $1/firmware.img | cut -f 1)
	echo "  -> size: $check_size_bytes bytes"
	check_size_remainder=$(($check_size_bytes % 16384))
	echo "  -> remainder: $check_size_remainder"
	if [ $check_size_remainder -ne 0 ] ; then
		echo "  -> !! IMAGE SIZE IS NOT EVENLY DIVISIBLE BY 16384, EXITING !!"
		exit 1
	fi
	echo "  -> image size is OK"
}

prepareImgDirs()
{
	# $1: top image preparation directory
	# $2: initramfs top directory
	# $3: rootfs preparation directory
	local initramDir=${1}/${2}
	local rootfsDir=${1}/${3}
	
	mkdir -p $1
	
	mkdir $initramDir
	mkdir ${initramDir}/boot
	mkdir ${initramDir}/conf

	mkdir $rootfsDir
	mkdir ${rootfsDir}/opt
	mkdir ${rootfsDir}/kernel-modules
	mkdir ${rootfsDir}/rootfs
	mkdir ${rootfsDir}/rootfs/usr/
	mkdir ${rootfsDir}/rootfs/usr/libexec
	mkdir ${rootfsDir}/rootfs/usr/share
	mkdir -p ${rootfsDir}/rootfs/usr/www/docs

	mkdir $1/loop
	
	# call appliance custom function
	appliance_prepareImgDirs "$initramDir" "$rootfsDir"
}

setupCfgDefault()
{
	# $1: initramfs preparation directory
	echo "Copying default configuration file..."
	cp $base/target/$target/config.xml $1/conf/config.xml
}

packageBuildInfo()
{
	# package a build report csv archive
	# $1: build root directory (source)
	# $2: rootfs preparation directory (output file target)
	local pkgInfoDir="$1/var/adm/packages/"
	local csvFile="$2/software-information"
	local revInfoFile="$2/svn-information.txt"
	local f
	local pNameVer
	local pDesc
	local pLic
	local pSite
	local currentLine
	#
	echo "Documenting software used in this build..."
	if [ ! -d "$pkgInfoDir" ] ; then
		echo "  -> Package info directory missing. Aborting!"
		exit 1
	fi
	rm -f $revInfoFile
	rm -f ${csvFile}.csv
	rm -f $csvFile
	touch $csvFile
	pushd "$pkgInfoDir"
	for f in $(find * -type f) 
	do
		echo "  -> Retrieving $f package information."
		pNameVer=$(awk '/Name and Version:/ {print $5";"$6}' "$f")
		pDesc=$(awk '/License:/ {getline; getline; print}' "$f"|sed -e 's/^ *//g' -e 's/ *$//g')
		pLic=$(awk '/License:/ {print $4}' "$f")
		pSite=$(awk '/^URL\(s\):/ {getline; print $1}' "$f")
		#
		currentLine=${pNameVer}";"${pDesc}";"${pLic}";"${pSite}
		echo "$currentLine" >> "$csvFile"
	done
	sort -k1 "$csvFile" > ${csvFile}.csv
	rm -f "$csvFile"
	#
	svn info $base > $revInfoFile
	echo "  -> Done."
	popd
}

prepareRootfs()
{
	# $1: build root (source)
	# $2: rootfs preparation top directory (destination)

	# Move usr/* out of the initramfs and into /offload
	#
	# usr/bin
	cp -Rp $1/usr/bin $2/rootfs/usr/
	# ...cleanup
	rm -rf $2/rootfs/usr/bin/aclocal*
	rm -rf $2/rootfs/usr/bin/auto*
	rm -rf $2/rootfs/usr/bin/bison
	rm -rf $2/rootfs/usr/bin/bzdiff
	rm -rf $2/rootfs/usr/bin/bzgrep
	rm -rf $2/rootfs/usr/bin/bzip2recover
	rm -rf $2/rootfs/usr/bin/bzmore
	rm -rf $2/rootfs/usr/bin/c_rehash
	rm -rf $2/rootfs/usr/bin/dbclient
	rm -rf $2/rootfs/usr/bin/envsubst
	rm -rf $2/rootfs/usr/bin/flite
	rm -rf $2/rootfs/usr/bin/flite_cmu_time_awb
	rm -rf $2/rootfs/usr/bin/flite_cmu_us_awb
	rm -rf $2/rootfs/usr/bin/flite_cmu_us_kal16
	rm -rf $2/rootfs/usr/bin/flite_cmu_us_rms
	rm -rf $2/rootfs/usr/bin/flite_cmu_us_slt
	rm -rf $2/rootfs/usr/bin/flite_time
	rm -rf $2/rootfs/usr/bin/gettextize
	rm -rf $2/rootfs/usr/bin/ifnames
	rm -rf $2/rootfs/usr/bin/libtool*
	rm -rf $2/rootfs/usr/bin/locale
	rm -rf $2/rootfs/usr/bin/ngettext
	rm -rf $2/rootfs/usr/bin/msg*
	rm -rf $2/rootfs/usr/bin/php-config
	rm -rf $2/rootfs/usr/bin/phpize
	rm -rf $2/rootfs/usr/bin/recode-sr-latin
	rm -rf $2/rootfs/usr/bin/xgettext
	rm -rf $2/rootfs/usr/bin/yacc

	# usr/lib
	cp -Rp $1/usr/lib $2/rootfs/usr/
	# ...cleanup
	rm -rf $2/rootfs/usr/lib/build/
	rm -rf $2/rootfs/usr/lib/engines/
	rm -rf $2/rootfs/usr/lib/gettext/
	rm -rf $2/rootfs/usr/lib/grub/
	rm -rf $2/rootfs/usr/lib/perl5/
	rm -rf $2/rootfs/usr/lib/php/
	rm -rf $2/rootfs/usr/lib/pkgconfig/
	rm -rf $2/rootfs/usr/lib/preloadable_libiconv.so

	# usr/libexec
	if [ -f "$1/usr/libexec/sftp-server" ]; then
		cp -Rp $1/usr/libexec/sftp-server $2/rootfs/usr/libexec
	else
		echo "Notice: sftp server not selected for build or not available."
	fi

	# usr/sbin
	cp -Rp $1/usr/sbin $2/rootfs/usr/
	# ...cleanup
	rm -rf $2/rootfs/usr/sbin/grub
	# rm -rf $2/rootfs/usr/sbin/remove_this_file

	# usr/share
	mkdir $2/rootfs/usr/share/terminfo
	mkdir $2/rootfs/usr/share/terminfo/a
	cp -Rp $1/usr/share/terminfo/a/ansi $2/rootfs/usr/share/terminfo/a/
	mkdir $2/rootfs/usr/share/terminfo/l
	cp -Rp $1/usr/share/terminfo/l/linux $2/rootfs/usr/share/terminfo/l/
	mkdir $2/rootfs/usr/share/terminfo/s
	cp -Rp $1/usr/share/terminfo/s/screen $2/rootfs/usr/share/terminfo/s/
	mkdir $2/rootfs/usr/share/terminfo/v
	cp -Rp $1/usr/share/terminfo/v/vt100 $2/rootfs/usr/share/terminfo/v/
	cp -Rp $1/usr/share/terminfo/v/vt102 $2/rootfs/usr/share/terminfo/v/
	cp -Rp $1/usr/share/terminfo/v/vt200 $2/rootfs/usr/share/terminfo/v/
	mkdir $2/rootfs/usr/share/terminfo/x
	cp -Rp $1/usr/share/terminfo/x/xterm $2/rootfs/usr/share/terminfo/x/
	cp -Rp $1/usr/share/terminfo/x/xterm-color $2/rootfs/usr/share/terminfo/x/
	cp -Rp $1/usr/share/terminfo/x/xterm-xfree86 $2/rootfs/usr/share/terminfo/x/
	cp -Rp $1/usr/share/udhcpc $2/rootfs/usr/share/
	chmod 755 $2/rootfs/usr/share/udhcpc/default.script
	mkdir $2/rootfs/usr/share/zoneinfo
	cp -Rp $1/usr/share/zoneinfo $2/rootfs/usr/share/
	if [ -d "$1/usr/share/i18n" ] ; then
		cp -Rp $1/usr/share/i18n $2/rootfs/usr/share/
	fi

	# usr/www
	cp -Rp $1/usr/www $2/rootfs/usr/
	chmod 644 $2/rootfs/usr/www/*
	chmod 755 $2/rootfs/usr/www/*.php
	chmod 755 $2/rootfs/usr/www/cgi-bin/*.cgi

	# call appliance custom function
	appliance_prepareRootfs "$1" "$2"
	appliance_fixRelativeLinks "$2/rootfs/usr/" '../..'

	# add a build report to image
	packageBuildInfo "$1" "$2/rootfs/usr/www/docs"
}

doCleanup()
{
	# $1: firmware preparation top directory
	echo "Cleaning away stray files..."
	find $1/ -name "._*" -delete
	find $1/ -name "*.a" -delete
	find $1/ -name "*.c" -delete
	find $1/ -name "*.o" -delete
	find $1/ -name "*.po" -delete
	rm -rf `find $1/ -name ".svn"`
}

rawWriteLoaders()
{
	# write target ipl and spl, if any
	if [ -f $base/target/$target/image.conf ]; then
		echo "Checking for target ipl and spl..."
		if [ -f $ipl_file ]; then
			echo "Writing target initial program loader..."
			echo "  -> offset: $ipl_offset"
			echo "  -> initial program loader: $(basename $ipl_file)"
			dd if=$ipl_file \
				of=$imagelocation/firmware.img \
				bs=$sect_size \
				seek=$ipl_offset
			echo "  -> Done."
		fi
		if [ -f $spl_file ]; then
			echo "Writing target second program loader..."
			echo "  -> offset: $spl_offset"
			echo "  -> second program loader: $(basename $spl_file)"
			dd if=$spl_file \
				of=$imagelocation/firmware.img \
				bs=$sect_size \
				seek=$spl_offset
			echo "  -> Done."
		fi
	fi
}

setupGrub()
{
	local grub_cmdfile
	grub_cmdfile="$build_root/tmp/grub.in"
	rm -f "$grub_cmdfile"

	echo "Installing grub onto the image..."
	cat "$base/target/share/grub.in" | sed -e "s/__CILS_NEEDED__/$cyls_needed/" >> "$grub_cmdfile"

	grub --device-map=/dev/null --batch --no-pager --no-floppy --no-curses < "$grub_cmdfile"
	rm -f "$grub_cmdfile"
	echo "  -> Done."
}
